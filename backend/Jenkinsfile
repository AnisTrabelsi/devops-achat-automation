pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'                      // Nom de l'outil configuré dans Jenkins (Manage Jenkins > Tools)
        SONARQUBE_TOKEN = credentials('sonar-token')        // Jenkins credentials ID
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-id') // Jenkins credentials ID (DockerHub)
        NEXUS_URL = 'http://192.168.33.10:8081/repository/maven-releases/'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/AnisTrabelsi/devops-achat-automation-anistrabelsi.git'
            }
        }

        stage('Build & Test') {
            steps {
                dir('achat-project/backend') {
                    sh 'mvn clean verify'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    dir('achat-project/backend') {
                        sh "mvn sonar:sonar -Dsonar.projectKey=achat-backend-anistrabelsi-1s5 -Dsonar.login=$SONARQUBE_TOKEN"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('achat-project/backend') {
                    sh "docker build -t anis477/achat-backend-anistrabelsi-1s5 ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhub-id', url: '') {
                    sh "docker push anis477/achat-backend-anistrabelsi-1s5"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                dir('achat-project/backend') {
                    sh "mvn deploy -DskipTests"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline terminé avec succès ✅'
        }
        failure {
            echo 'Pipeline échoué ❌'
        }
    }
}
